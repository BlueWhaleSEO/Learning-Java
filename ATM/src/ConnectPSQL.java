import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * BCS C1a
 * ConnectPSQL.java
 * Purpose: Connects to database and executes methods that performs SQL queries in Queries class.
 * Results are submitted back to Bank class.
 *
 * @version 0.1 12/05/2012
 * @author Donatas Stonys 11834559
 */ 
public class ConnectPSQL {
	
// *** Variables section *** //
	
	private static Connection connection;		// Connection to database 
	private static Statement statement;			// Used to talk to database 
	private static DatabaseMetaData metadata;	// This is basically info the driver delivers about the DB it just connected to.
	private static ResultSet results;			// A table of data representing a database result set, which is usually generated by executing a statement that queries the database.
	
	private static Queries queries;				// Gets queries from Queries class

	final private static String urlHost = "jdbc:postgresql://your.domain.com";			// Host's URL 
	final private static String portNo = "5432";									// Port number
	final private static String database = "yourDatabase";								// Database name
	final private static String username = "yourUsername";							// Database user name
	final private static String password = "yourPassword";								// Database password
	
	private static long userID;
	private String userPassword;
	private static long userBalance;
	private static String userName;
	
// *** Queries from Bank class *** //
	// *** Validates the user *** //
	public static void accessDatabaseRunBankQueriesCheckValid(){
		queries = new Queries();
		
		try {
			// *** Connection section *** //
			
			Class.forName("org.postgresql.Driver");
 
		} catch (ClassNotFoundException e) {
 
			System.out.println("PostgreSQL JDBC Driver not found!");
			e.printStackTrace();	// prints much more information about the error
			return;
 
		}
 
		System.out.println("PostgreSQL JDBC Driver Registered!");
 
		try {
			
			connection = DriverManager.getConnection( urlHost+":"+portNo+"/"+database, username, password);	// connecting to the PostgreSQL server
		    statement = connection.createStatement();
		    
		 // *** Queries section *** //
		    
		    String checkAccountExistence = queries.getQueryCheckAccountExistence(); // retrieves value(s) from the table(s)
		    System.out.println("Retrieving data from tables: "+checkAccountExistence+"\n");	// Informs about the progress
			results = statement.executeQuery(checkAccountExistence);
			while (results.next()) // The next() method advances the cursor to the next record
			{
				userID = results.getLong(1); // gets the value from last row's 1st column. The getInt() and getString() methods retrieve the value of the designated column in the current row of this ResultSet object as an int/String in the Java programming language.
				userName = results.getString(2);
			}
				
				results.close(); // close the connections to database
				statement.close();
				
		} 
		catch (SQLException e) 
		{
			 
			System.out.println("Connection Failed!");
			e.printStackTrace(); // prints much more information about the error
			return;
 
		}
 
		if (connection != null) {
			System.out.println("Connection has been established and queries executed!");
		} else {
			System.out.println("Failed to make a connection!");
		}
	}
	// *** Checks user's balance *** //	
	public static void accessDatabaseRunBankQueriesGetBalance(){
		queries = new Queries();
		
		try {
			// *** Connection section *** //
			
			Class.forName("org.postgresql.Driver");
 
		} catch (ClassNotFoundException e) {
 
			System.out.println("PostgreSQL JDBC Driver not found!");
			e.printStackTrace();	// prints much more information about the error
			return;
 
		}
 
		System.out.println("PostgreSQL JDBC Driver Registered!");
 
		try {
			
			connection = DriverManager.getConnection( urlHost+":"+portNo+"/"+database, username, password);	// connecting to the PostgreSQL server
		    statement = connection.createStatement();
		    
		 // *** Queries section *** //
		    
		    String checkAccountBalance = queries.getQueryCheckAccountBalance(); // retrieves value(s) from the table(s)
		    System.out.println("Checking the balance: "+checkAccountBalance+"\n");	// Informs about the progress
			results = statement.executeQuery(checkAccountBalance);
			while (results.next()) // The next() method advances the cursor to the next record
			{
				userBalance = results.getLong(1); // gets the value from last row's 1st column. The getInt() and getString() methods retrieve the value of the designated column in the current row of this ResultSet object as an int/String in the Java programming language.
				System.out.printf("Your current balance is %s.\n", userBalance);
			}
				
				results.close(); // close the connections to database
				statement.close();
				
		} 
		catch (SQLException e) 
		{
			 
			System.out.println("Connection Failed!");
			e.printStackTrace(); // prints much more information about the error
			return;
 
		}
 
		if (connection != null) {
			System.out.println("Connection has been established and queries executed!");
		} else {
			System.out.println("Failed to make a connection!");
		}
	}
	
	// *** Adds deposit to user's account *** //	
	public static void accessDatabaseRunBankQueriesDeposit(){
		queries = new Queries();
		
		try {
			// *** Connection section *** //
			
			Class.forName("org.postgresql.Driver");
 
		} catch (ClassNotFoundException e) {
 
			System.out.println("PostgreSQL JDBC Driver not found!");
			e.printStackTrace();	// prints much more information about the error
			return;
 
		}
 
		System.out.println("PostgreSQL JDBC Driver Registered!");
 
		try {
			
			connection = DriverManager.getConnection( urlHost+":"+portNo+"/"+database, username, password);	// connecting to the PostgreSQL server
		    statement = connection.createStatement();
		    
		 // *** Queries section *** //
		    
		    String depositAccount = queries.getQueryDepositAccount(); // retrieves value(s) from the table(s)
		    System.out.println("Updating balance: "+depositAccount+"\n");	// Informs about the progress
			statement.executeUpdate(depositAccount); // Executes UPDATE query in Queries class to update the balance
				
				results.close(); // close the connections to database
				statement.close();
				
		} 
		catch (SQLException e) 
		{
			 
			System.out.println("Connection Failed!");
			e.printStackTrace(); // prints much more information about the error
			return;
 
		}
 
		if (connection != null) {
			System.out.println("Connection has been established and queries executed!");
		} else {
			System.out.println("Failed to make a connection!");
		}
	}
	
	// *** Withdraws money from user account *** //	
	public static void accessDatabaseRunBankQueriesWithdraw(){
		queries = new Queries();
		
		try {
			// *** Connection section *** //
			
			Class.forName("org.postgresql.Driver");
 
		} catch (ClassNotFoundException e) {
 
			System.out.println("PostgreSQL JDBC Driver not found!");
			e.printStackTrace();	// prints much more information about the error
			return;
 
		}
 
		System.out.println("PostgreSQL JDBC Driver Registered!");
 
		try {
			
			connection = DriverManager.getConnection( urlHost+":"+portNo+"/"+database, username, password);	// connecting to the PostgreSQL server
		    statement = connection.createStatement();
		    
		 // *** Queries section *** //
		    
		    String withdrawAccount = queries.getQueryWithdrawAccount(); // retrieves value(s) from the table(s)
		    System.out.println("Updating balance: "+withdrawAccount+"\n");	// Informs about the progress
			statement.executeUpdate(withdrawAccount); // Executes UPDATE query in Queries class to update the balance
				
				results.close(); // close the connections to database
				statement.close();
				
		} 
		catch (SQLException e) 
		{
			 
			System.out.println("Connection Failed!");
			e.printStackTrace(); // prints much more information about the error
			return;
 
		}
 
		if (connection != null) {
			System.out.println("Connection has been established and queries executed!");
		} else {
			System.out.println("Failed to make a connection!");
		}
	}
	
// *** Queries from Register class *** //	
	public void accessDatabaseRunRegisterQueries(){
		
		queries = new Queries();
		
		try {
			
			// *** Connection section *** //
						
						Class.forName("org.postgresql.Driver");
			 
					} catch (ClassNotFoundException e) {
			 
						System.out.println("PostgreSQL JDBC Driver not found!");
						e.printStackTrace();	// prints much more information about the error
						return;
			 
					}
			 
					System.out.println("PostgreSQL JDBC Driver Registered!");
			 
					try {
						
						connection = DriverManager.getConnection( urlHost+":"+portNo+"/"+database, username, password);	// connecting to the PostgreSQL server
					    statement = connection.createStatement();

			// *** Queries section *** //
					    
					 metadata = connection.getMetaData();   
					 results = metadata.getTables("customer", null, "account", null);	// check if table(s) is there
					 if (results.next()) {	// Table exists
						 System.out.println("Table(s) already exist. You may continue to populate them.");
					 }
					 else {	// Table does not exist
					     String createTBaccount = queries.getQueryCreateTBaccount();	// create a table
					     System.out.println("Executing this command to create a new table: "+createTBaccount+"\n");	// Informs about the progress
					     statement.executeUpdate(createTBaccount);	// The prepared statement is executed. We use the executeUpdate() method of the statement object when we don't expect any data to be returned. This is when we create databases or execute INSERT, UPDATE, DELETE statements.

					     String createTBcustomer = queries.getQueryCreateTBcustomer();	// create a table
					     System.out.println("Executing this command to create a new table: "+createTBcustomer+"\n");	// Informs about the progress
					     statement.executeUpdate(createTBcustomer);	// The prepared statement is executed. We use the executeUpdate() method of the statement object when we don't expect any data to be returned. This is when we create databases or execute INSERT, UPDATE, DELETE statements.
					     
					     String alterTBaccount = queries.getQueryAlterTBaccount();	// alter a table
					     System.out.println("Executing this command to alter the table: "+alterTBaccount+"\n");	// Informs about the progress
					     statement.executeUpdate(alterTBaccount);	// The prepared statement is executed. We use the executeUpdate() method of the statement object when we don't expect any data to be returned. This is when we create databases or execute INSERT, UPDATE, DELETE statements.

					     String alterTBcustomer = queries.getQueryAlterTBcustomer();	// alter a table
					     System.out.println("Executing this command to alter the table: "+alterTBcustomer+"\n");	// Informs about the progress
					     statement.executeUpdate(alterTBcustomer);	// The prepared statement is executed. We use the executeUpdate() method of the statement object when we don't expect any data to be returned. This is when we create databases or execute INSERT, UPDATE, DELETE statements.


					 } 

						String queryUpdateTBcustomer = queries.getQueryUpdateTBcustomer(); // populate the table with values
					    System.out.println("Updating table \"customer\": "+queryUpdateTBcustomer+"\n");	// Informs about the progress
					    statement.executeUpdate(queryUpdateTBcustomer);	// The prepared statement is executed. We use the executeUpdate() method of the statement object when we don't expect any data to be returned. This is when we create databases or execute INSERT, UPDATE, DELETE statements.
					 
					    String queryUpdateTBaccount = queries.getQueryUpdateTBaccount(); // populate the table with values
					    System.out.println("Updating table \"account\": "+queryUpdateTBaccount+"\n");	// Informs about the progress
					    statement.executeUpdate(queryUpdateTBaccount);	// The prepared statement is executed. We use the executeUpdate() method of the statement object when we don't expect any data to be returned. This is when we create databases or execute INSERT, UPDATE, DELETE statements.
				    

						    String queryRetrieveTBcustomer = queries.getQueryRetrieveTBcustomer(); // retrieves value(s) from the table(s)
						    System.out.println("Retrieving data from tables: "+queryRetrieveTBcustomer+"\n");	// Informs about the progress
							results = statement.executeQuery(queryRetrieveTBcustomer);
							while (results.next()) // The next() method advances the cursor to the next record
							{
								userID = results.getInt(1); // gets the value from last row's 1st column. The getInt() and getString() methods retrieve the value of the designated column in the current row of this ResultSet object as an int/String in the Java programming language.
								userPassword = results.getString(2); // gets the value from last row's 2nd column
								userBalance = results.getLong(3);
								userName = results.getString(4);
							    System.out.printf("Thank you, %s! Your account ID is %d, your password is \"%s\". Please memorize them!\nYour current balance is \u00a3%s.00.\n", userName, userID, userPassword, userBalance);
							}
					    
		// *** Uncomment 3 lines below and run Register to drop all tables in database *** //
						    // String dropTB = queries.getQueryDropTB(); // drop the table
						    // System.out.println("Dropping table(s): "+dropTB+"\n");	// Informs about the progress
							// statement.executeUpdate(dropTB);	// The prepared statement is executed. We use the executeUpdate() method of the statement object when we don't expect any data to be returned. This is when we create databases or execute INSERT, UPDATE, DELETE statements.
							
							results.close(); // close the connections to database
							statement.close();
							// connection.close();
							// System.out.println("Connection is closed.");
					    
					     
					} catch (SQLException e) {
			 
						System.out.println("Connection Failed!");
						e.printStackTrace(); // prints much more information about the error
						return;
			 
					}
			 
					if (connection != null) {
						System.out.println("Connection has been established and queries executed!");
					} else {
						System.out.println("Failed to make a connection!");
					}
	}

	

// *** Getters *** //	
	public long getCustomerID() {
		return userID;
	}
	public long getCustomerBalance() {
		return userBalance;
	}
	public String getCustomerName(){
		return userName;
	}
}
